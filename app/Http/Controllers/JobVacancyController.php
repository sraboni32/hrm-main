<?php

namespace App\Http\Controllers;

use App\Models\JobVacancy;
use App\Models\Company;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class JobVacancyController extends Controller
{
    public function index()
    {
        $job_vacancies = JobVacancy::where('status', true)
            ->where('deleted_at', null)
            ->with('company')
            ->orderBy('created_at', 'desc')
            ->get();

        return view('job_vacancies.index', compact('job_vacancies'));
    }

    public function admin_index()
    {
        $job_vacancies = JobVacancy::where('deleted_at', null)
            ->with(['company', 'creator'])
            ->orderBy('created_at', 'desc')
            ->get();

        return view('job_vacancies.admin.index', compact('job_vacancies'));
    }

    public function create()
    {
        $companies = Company::where('deleted_at', null)->get();
        return view('job_vacancies.admin.create', compact('companies'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'link' => 'required|url|max:255',
            'status' => 'required|boolean',
            'company_id' => 'required|exists:companies,id'
        ]);

        $job_vacancy = new JobVacancy();
        $job_vacancy->title = $request->title;
        $job_vacancy->description = $request->description;
        $job_vacancy->link = $request->link;
        $job_vacancy->status = $request->status;
        $job_vacancy->company_id = $request->company_id;
        $job_vacancy->created_by = Auth::id();
        $job_vacancy->save();

        return redirect()->route('job_vacancies.admin.index')
            ->with('success', 'Job vacancy created successfully.');
    }

    public function edit($id)
    {
        $job_vacancy = JobVacancy::findOrFail($id);
        $companies = Company::where('deleted_at', null)->get();
        return view('job_vacancies.admin.edit', compact('job_vacancy', 'companies'));
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'link' => 'required|url|max:255',
            'status' => 'required|boolean',
            'company_id' => 'required|exists:companies,id'
        ]);

        $job_vacancy = JobVacancy::findOrFail($id);
        $job_vacancy->title = $request->title;
        $job_vacancy->description = $request->description;
        $job_vacancy->link = $request->link;
        $job_vacancy->status = $request->status;
        $job_vacancy->company_id = $request->company_id;
        $job_vacancy->save();

        return redirect()->route('job_vacancies.admin.index')
            ->with('success', 'Job vacancy updated successfully.');
    }

    public function destroy($id)
    {
        $job_vacancy = JobVacancy::findOrFail($id);
        $job_vacancy->delete();

        return redirect()->route('job_vacancies.admin.index')
            ->with('success', 'Job vacancy deleted successfully.');
    }

    public function export(Request $request)
    {
        $format = $request->get('format', 'csv');
        $job_vacancies = JobVacancy::where('deleted_at', null)->with(['company', 'creator'])->get();

        if ($format === 'pdf') {
            return $this->exportJobVacanciesPDF($job_vacancies);
        } else {
            return $this->exportJobVacanciesCSV($job_vacancies);
        }
    }

    /**
     * Export Job Vacancies as CSV
     */
    private function exportJobVacanciesCSV($job_vacancies): \Symfony\Component\HttpFoundation\StreamedResponse
    {
        $filename = 'job_vacancies_' . date('Ymd_His') . '.csv';
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => "attachment; filename=$filename",
        ];

        $columns = ['ID', 'Title', 'Description', 'Link', 'Status', 'Company', 'Created By', 'Created At'];

        $callback = function() use ($job_vacancies, $columns): void {
            $file = fopen('php://output', 'w');

            // Add header information
            fputcsv($file, ['Job Vacancies Report']);
            fputcsv($file, ['Generated: ' . now()->format('Y-m-d H:i:s')]);
            fputcsv($file, ['Generated by: ' . auth()->user()->username ?? 'System']);
            fputcsv($file, ['Total Vacancies: ' . $job_vacancies->count()]);
            fputcsv($file, []); // Empty row

            fputcsv($file, $columns);

            foreach ($job_vacancies as $job) {
                fputcsv($file, [
                    $job->id,
                    $job->title ?? '',
                    strip_tags($job->description ?? ''),
                    $job->link ?? '',
                    $job->status ? 'Active' : 'Inactive',
                    $job->company?->name ?? '---',
                    $job->creator?->username ?? '---',
                    $job->created_at ? $job->created_at->format('Y-m-d H:i:s') : '---',
                ]);
            }

            // Add summary
            fputcsv($file, []); // Empty row
            fputcsv($file, ['SUMMARY']);
            fputcsv($file, ['Active Vacancies', $job_vacancies->where('status', 1)->count()]);
            fputcsv($file, ['Inactive Vacancies', $job_vacancies->where('status', 0)->count()]);

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    /**
     * Export Job Vacancies as PDF
     */
    private function exportJobVacanciesPDF($job_vacancies): \Illuminate\Http\Response
    {
        $company = \App\Models\Company::first();

        $activeCount = $job_vacancies->where('status', 1)->count();
        $inactiveCount = $job_vacancies->where('status', 0)->count();

        $data = [
            'job_vacancies' => $job_vacancies,
            'company' => $company,
            'generated_at' => now()->format('Y-m-d H:i:s'),
            'generated_by' => auth()->user()->username ?? 'System',
            'total_vacancies' => $job_vacancies->count(),
            'summary' => [
                'active_count' => $activeCount,
                'inactive_count' => $inactiveCount,
                'companies_count' => $job_vacancies->groupBy('company_id')->count()
            ]
        ];

        $pdf = \PDF::loadView('exports.job_vacancies_pdf', $data);
        $pdf->setPaper('A4', 'landscape');

        return $pdf->download('job_vacancies_' . date('Ymd_His') . '.pdf');
    }

    public function import(Request $request)
    {
        $request->validate([
            'import_file' => 'required|file|mimes:csv,txt',
        ]);
        $file = $request->file('import_file');
        $handle = fopen($file->getRealPath(), 'r');
        $header = fgetcsv($handle);
        $created = 0;
        while (($row = fgetcsv($handle)) !== false) {
            // Map columns: [ID, Title, Description, Link, Status, Company, Created By, Created At]
            $title = $row[1] ?? null;
            $description = $row[2] ?? null;
            $link = $row[3] ?? null;
            $status = strtolower($row[4] ?? '') === 'active' ? 1 : 0;
            $company_name = $row[5] ?? null;
            $company = $company_name ? \App\Models\Company::where('name', $company_name)->first() : null;
            if (!$title || !$description || !$link || !$company) continue;
            JobVacancy::create([
                'title' => $title,
                'description' => $description,
                'link' => $link,
                'status' => $status,
                'company_id' => $company->id,
                'created_by' => Auth::id(),
            ]);
            $created++;
        }
        fclose($handle);
        return redirect()->route('job_vacancies.admin.index')->with('success', "$created job vacancies imported successfully.");
    }

    public function delete_by_selection(Request $request)
    {
        $ids = $request->input('ids', []);
        if (!empty($ids)) {
            JobVacancy::whereIn('id', $ids)->delete();
            return response()->json(['success' => true, 'message' => 'Selected job vacancies deleted successfully.']);
        }
        return response()->json(['success' => false, 'message' => 'No job vacancies selected.']);
    }
}